(self.webpackChunkbakupub=self.webpackChunkbakupub||[]).push([[6405],{3905:function(e,r,n){"use strict";n.d(r,{Zo:function(){return u},kt:function(){return d}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),s=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=s(e.components);return t.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?t.createElement(h,i(i({ref:r},u),{},{components:n})):t.createElement(h,i({ref:r},u))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9927:function(e,r,n){"use strict";n.r(r),n.d(r,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var t=n(2122),a=n(9756),o=(n(7294),n(3905)),i={},c={unversionedId:"se/programming/tech/java/concurrent",id:"se/programming/tech/java/concurrent",isDocsHomePage:!1,title:"Java concurrency",description:"example",source:"@site/docs/se/programming/tech/java/concurrent.md",sourceDirName:"se/programming/tech/java",slug:"/se/programming/tech/java/concurrent",permalink:"/docs/se/programming/tech/java/concurrent",version:"current",frontMatter:{},sidebar:"se_programming",previous:{title:"Summaries",permalink:"/docs/se/programming/tech/java/summaries"},next:{title:"Enterprise Integration Patterns",permalink:"/docs/se/programming/tech/java/eip"}},l=[{value:"\u7ba1\u7a0b(monitor)",id:"\u7ba1\u7a0bmonitor",children:[]},{value:"\u504f\u5411\u9501",id:"\u504f\u5411\u9501",children:[]},{value:"\u8f7b\u91cf\u7ea7\u9501",id:"\u8f7b\u91cf\u7ea7\u9501",children:[]},{value:"\u91cd\u91cf\u7ea7\u9501",id:"\u91cd\u91cf\u7ea7\u9501",children:[]},{value:"\u9501\u91cd\u5165",id:"\u9501\u91cd\u5165",children:[]},{value:"\u9501\u81ea\u65cb",id:"\u9501\u81ea\u65cb",children:[]},{value:"\u9501\u81a8\u80c0",id:"\u9501\u81a8\u80c0",children:[]},{value:"\u7ebf\u7a0b\u6c60",id:"\u7ebf\u7a0b\u6c60",children:[]}],s={toc:l};function u(e){var r=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://gitee.com/lawmoe/java-example-high-concurrency"},"example")),(0,o.kt)("h2",{id:"\u7ba1\u7a0bmonitor"},"\u7ba1\u7a0b(monitor)"),(0,o.kt)("h2",{id:"\u504f\u5411\u9501"},"\u504f\u5411\u9501"),(0,o.kt)("h2",{id:"\u8f7b\u91cf\u7ea7\u9501"},"\u8f7b\u91cf\u7ea7\u9501"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u8f7b\u91cf\u7ea7\u9501\u8fdb\u884cCAS"),(0,o.kt)("li",{parentName:"ol"},"CAS\u5931\u8d25->\u9501\u81a8\u80c0"),(0,o.kt)("li",{parentName:"ol"},"CAS\u6210\u529f->return")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="jdk8u\\hotspot\\src\\share\\vm\\runtime\\synchronizer.cpp:222"',title:'"jdk8u\\hotspot\\src\\share\\vm\\runtime\\synchronizer.cpp:222"'},'// -----------------------------------------------------------------------------\n// Interpreter/Compiler Slow Case\n// This routine is used to handle interpreter/compiler slow case\n// We don\'t need to use fast path here, because it must have been\n// failed in the interpreter/compiler code.\nvoid ObjectSynchronizer::slow_enter(Handle obj, BasicLock* lock, TRAPS) {\n  markOop mark = obj->mark();\n  assert(!mark->has_bias_pattern(), "should not see bias pattern here");\n\n  if (mark->is_neutral()) {\n    // Anticipate successful CAS -- the ST of the displaced mark must\n    // be visible <= the ST performed by the CAS.\n    lock->set_displaced_header(mark);\n    if (mark == (markOop) Atomic::cmpxchg_ptr(lock, obj()->mark_addr(), mark)) {\n      TEVENT (slow_enter: release stacklock) ;\n      return ;\n    }\n    // Fall through to inflate() ...\n  } else\n  if (mark->has_locker() && THREAD->is_lock_owned((address)mark->locker())) {\n    assert(lock != mark->locker(), "must not re-lock the same lock");\n    assert(lock != (BasicLock*)obj->mark(), "don\'t relock with same BasicLock");\n    lock->set_displaced_header(NULL);\n    return;\n  }\n\n#if 0\n  // The following optimization isn\'t particularly useful.\n  if (mark->has_monitor() && mark->monitor()->is_entered(THREAD)) {\n    lock->set_displaced_header (NULL) ;\n    return ;\n  }\n#endif\n\n  // The object header will never be displaced to this lock,\n  // so it does not matter what the value is, except that it\n  // must be non-zero to avoid looking like a re-entrant lock,\n  // and must not look locked either.\n  lock->set_displaced_header(markOopDesc::unused_mark());\n  ObjectSynchronizer::inflate(THREAD, obj())->enter(THREAD);\n}\n')),(0,o.kt)("h2",{id:"\u91cd\u91cf\u7ea7\u9501"},"\u91cd\u91cf\u7ea7\u9501"),(0,o.kt)("h2",{id:"\u9501\u91cd\u5165"},"\u9501\u91cd\u5165"),(0,o.kt)("h2",{id:"\u9501\u81ea\u65cb"},"\u9501\u81ea\u65cb"),(0,o.kt)("p",null,"\u53ef\u4ee5\u51cf\u5c11\u7ebf\u7a0b\u963b\u585e\u9020\u6210\u7684\u7ebf\u7a0b\u5207\u6362"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"#\u5173\u95ed\u81ea\u65cb\u9501\u4f18\u5316\n-XX:-UseSpinning\n#\u4fee\u6539\u9ed8\u8ba4\u7684\u81ea\u65cb\u6b21\u6570\n-XX:PreBlockSpin\n")),(0,o.kt)("h2",{id:"\u9501\u81a8\u80c0"},"\u9501\u81a8\u80c0"),(0,o.kt)("p",null,"\u8f7b\u91cf\u7ea7\u9501->\u91cd\u91cf\u7ea7\u9501"),(0,o.kt)("h2",{id:"\u7ebf\u7a0b\u6c60"},"\u7ebf\u7a0b\u6c60"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler){}\n")))}u.isMDXComponent=!0}}]);