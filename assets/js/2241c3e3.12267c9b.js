(self.webpackChunkbakupub=self.webpackChunkbakupub||[]).push([[7477],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return t?a.createElement(g,o(o({ref:n},s),{},{components:t})):a.createElement(g,o({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2695:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return s}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o={},l={unversionedId:"se/programming/tech/java/spring",id:"se/programming/tech/java/spring",isDocsHomePage:!1,title:"Spring",description:"Spring Framework",source:"@site/docs/se/programming/tech/java/spring.md",sourceDirName:"se/programming/tech/java",slug:"/se/programming/tech/java/spring",permalink:"/docs/se/programming/tech/java/spring",version:"current",frontMatter:{},sidebar:"se_programming",previous:{title:"Service Provider Interface",permalink:"/docs/se/programming/tech/java/spi"},next:{title:"JavaScript",permalink:"/docs/se/programming/tech/java_script/language"}},c=[{value:"Spring Framework",id:"spring-framework",children:[{value:"Instantiating a Container",id:"instantiating-a-container",children:[]},{value:"annotation vs xml",id:"annotation-vs-xml",children:[]}]}],p={toc:c};function s(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"spring-framework"},"Spring Framework"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Features",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Core",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ioc"),(0,i.kt)("li",{parentName:"ul"},"AOP"),(0,i.kt)("li",{parentName:"ul"},"events"),(0,i.kt)("li",{parentName:"ul"},"resources"),(0,i.kt)("li",{parentName:"ul"},"i18n"),(0,i.kt)("li",{parentName:"ul"},"validation"),(0,i.kt)("li",{parentName:"ul"},"data binding"),(0,i.kt)("li",{parentName:"ul"},"type conversion"),(0,i.kt)("li",{parentName:"ul"},"SpEL"))),(0,i.kt)("li",{parentName:"ul"},"Testing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mock objects"),(0,i.kt)("li",{parentName:"ul"},"testContext Framework"),(0,i.kt)("li",{parentName:"ul"},"spring MVC Test"),(0,i.kt)("li",{parentName:"ul"},"WebTestClient")))))),(0,i.kt)("h3",{id:"instantiating-a-container"},"Instantiating a Container"),(0,i.kt)("h4",{id:"configuration-metadata"},"configuration metadata"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="xml-based-configuration.xml"',title:'"xml-based-configuration.xml"'},"<beans>\n  \x3c!--bean definitions--\x3e\n</beans>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="annotation-based-configuration.xml"',title:'"annotation-based-configuration.xml"'},"<beans>\n  <context:annotation-config/>\n</beans>\n")),(0,i.kt)("h4",{id:"instantiating"},"Instantiating"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Example{\n  public static void main(String[] args){\n    //Instantiating a container use xml metadata\n    ApplicationContext context = new ClassPathXmlApplicationContext("xml-based-configuration.xml");\n    //or Instantiating a container use annotation metadata\n    ApplicationContext context = new ClassPathXmlApplicationContext("annotation-based-configuration.xml");\n    //or Instantiating a container based on java configuration\n    ApplicationContext context = new AnnotationConfigApplicationContext();\n    context.scan("org.example");\n    context.refresh();\n  }\n}\n')),(0,i.kt)("h3",{id:"annotation-vs-xml"},"annotation vs xml"),(0,i.kt)("h4",{id:"define"},"Define"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Service.java"',title:'"Service.java"'},"public interface Service{\n  findById(Long id);\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyServiceImpl.java"',title:'"MyServiceImpl.java"'},"public class MyServiceImpl implements Service{\n  //use @Autowired on field\n  @Autowired\n  private Dao dao;\n\n  //or use @Autowired on constructor\n  @Autowired\n  public ServiceImpl(Dao dao){\n    this.dao=dao;\n  }\n\n  //or use @Autowired on setter\n  @Autowired\n  public void setDao(Dao dao){\n    this.dao=dao;\n  }\n\n  //or use @Required on setter\n  @Required\n  public void setDao(Dao dao){\n    this.dao=dao;\n  }\n\n  findById(Long id){\n\n  }\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TheirServiceImpl.java"',title:'"TheirServiceImpl.java"'},"public class TheirServiceImpl implements Service{\n  //use @Autowired on field\n  @Autowired\n  private Dao dao;\n\n  findById(Long id){\n\n  }\n}\n\n")),(0,i.kt)("h4",{id:"configuration"},"Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<beans>\n  \x3c!--enable Component-scan--\x3e\n  <context:component-scan base-package="org.example"/>\n  \x3c!--define the bean of Dao--\x3e\n  <bean class="org.example.Dao">\n  </bean>\n  \x3c!--define Primary bean of Service--\x3e\n  <bean class="org.example.MyService" primary="true">\n  </bean>\n  \x3c!--define Scondary bean of Service--\x3e\n  <bean class="org.example.TheirService">\n  </bean>\n</beans>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Configuration\n//enable Component-scan\n@ComponentScan(basePackages = "org.example") \npublic class Configuration{\n  //define the bean of Dao\n  @Bean\n  public Dao dao(){\n    return new Dao();\n  }\n\n  //define Primary bean of Service\n  @Bean\n  @Primary\n  public Service myService(){\n    return new MyService(dao());\n  }\n\n  //define Scondary bean of Service\n  @Bean\n  public Service Service(){\n    return new TheirService();\n  }\n  \n}\n')))}s.isMDXComponent=!0}}]);