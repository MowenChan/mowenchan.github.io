"use strict";(self.webpackChunkbakupub=self.webpackChunkbakupub||[]).push([[7089],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,h=c["".concat(o,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8595:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],s={},o="Shell",p={unversionedId:"se/prog/tech/shell",id:"se/prog/tech/shell",title:"Shell",description:"First of all, what's a shell? Under Unix, a shell is a command interpreter. That is, it reads commands from the keyboard and executes them.",source:"@site/docs/se/prog/tech/shell.md",sourceDirName:"se/prog/tech",slug:"/se/prog/tech/shell",permalink:"/docs/se/prog/tech/shell",tags:[],version:"current",frontMatter:{}},u={},m=[{value:"pattern",id:"pattern",level:2},{value:"Variables",id:"variables",level:2},{value:"environment variables",id:"environment-variables",level:2},{value:"Command-line arguments",id:"command-line-arguments",level:2},{value:"special variables",id:"special-variables",level:2},{value:"Quasi-variable constructs",id:"quasi-variable-constructs",level:2},{value:"Patterns and Globbing",id:"patterns-and-globbing",level:2},{value:"Backquotes",id:"backquotes",level:2},{value:"Built in commands",id:"built-in-commands",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"shell"},"Shell"),(0,r.kt)("p",null,"First of all, what's a shell? Under Unix, a shell is a command interpreter. That is, it reads commands from the keyboard and executes them.\n",(0,r.kt)("a",{parentName:"p",href:"https://ooblick.com/text/sh/"},"ref"),"\nLaTeX2e document"),(0,r.kt)("h2",{id:"pattern"},"pattern"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"#!/bin/sh\n")),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"#!/bin/sh\nVAR=value\n\necho $VAR\necho ${VAR}isSh\n")),(0,r.kt)("h2",{id:"environment-variables"},"environment variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"#!/bin/sh\nVAR=value # set up a local variable\n\nexport VAR # Turn local variable into an environment variable\n\nunset VAR # unexport a variable\n")),(0,r.kt)("h2",{id:"command-line-arguments"},"Command-line arguments"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$#")," contains the number of command-line arguments that were given."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$0")," contains the name of the script (argv","[0]"," in C programs)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$1"),"-",(0,r.kt)("inlineCode",{parentName:"p"},"$9")," refers to the command-line argument."),(0,r.kt)("p",null,"If you have more than nine command-line arguments, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"shift")," command: this discards the first command-line argument, and bumps the remaining ones up by one position."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$*"),' list all of the command-line arguments. written "$1 $2 $3"'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$@"),' list all of the command-line arguments. written "$1" "$2" "$3"'),(0,r.kt)("h2",{id:"special-variables"},"special variables"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$?")," gives the exit status of the last command that was executed. This should be zero if the command exited normally."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$-")," lists all of the options with which sh was invoked. See sh(1) for details."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$$")," holds the PID of the current process."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$!")," holds the PID of the last command that was executed in the background."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$IFS")," (Input Field Separator) determines how sh splits strings into words."),(0,r.kt)("h2",{id:"quasi-variable-constructs"},"Quasi-variable constructs"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"${VAR}")," construct is actually a special case of a more general class of constructs:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${VAR:-expression}"),"Use default value: if VAR is set and non-null, expands to $VAR. Otherwise, expands to expression."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${VAR:=expression}"),"Set default value: if VAR is set and non-null, expands to $VAR. Otherwise, sets VAR to expression and expands to expression."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${VAR:?[expression]}"),"If VAR is set and non-null, expands to $VAR. Otherwise, prints expression to standard error and exits with a non-zero exit status."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${VAR:+expression}"),"If VAR is set and non-null, expands to the empty string. Otherwise, expands to expression."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${#VAR}"),"Expands to the length of $VAR."),(0,r.kt)("p",null,"The above patterns test whether VAR is set and non-null. Without the colon, they only test whether VAR is set."),(0,r.kt)("h2",{id:"patterns-and-globbing"},"Patterns and Globbing"),(0,r.kt)("p",null,"sh supports a limited form of pattern-matching. The operators are"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"*")," Matches zero or more characters.\n",(0,r.kt)("inlineCode",{parentName:"p"},"?")," Matches exactly one character."),(0,r.kt)("p",null,"[range]","\nMatches any character in range. range can be either a list of characters that match, or two endpoints separated by a dash: ","[ak3]"," matches either a, k, or 3; ","[a-z]"," matches any character in the range a through z; ","[a-mz]"," matches either a character in the range a through m, or z. If you wish to include a dash as part of the range, it must be the first character, e.g., ","[-p]"," will match either a dash or p."),(0,r.kt)("p",null,"When an expression containing these characters occurs in the middle of a command, sh substitutes the list of all files whose name matches the pattern. This is known as ``globbing.'' Otherwise, these are used mainly in the case construct."),(0,r.kt)("p",null,"As a special case, when a glob begins with ",(0,r.kt)("em",{parentName:"p"}," or ?, it does not match files that begin with a dot. To match these, you need to specify the dot explicitly (e.g., ."),", /tmp/.*)."),(0,r.kt)("p",null,"Note to MS-DOS users: under MS-DOS, the pattern ",(0,r.kt)("em",{parentName:"p"},".")," matches every file. In sh, it matches every file that contains a dot."),(0,r.kt)("h2",{id:"backquotes"},"Backquotes"),(0,r.kt)("p",null,"the expression is evaluated as a command witch within backquotes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"echo `whoami`\n# or\nname=`whoami`\n")),(0,r.kt)("h2",{id:"built-in-commands"},"Built in commands"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(command;...)")," \ud83d\udc49 execute commands in a subshell."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":")," \ud83d\udc49 just a colon do nothing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".flename")," \ud83d\udc49 read a file and excute."),(0,r.kt)("li",{parentName:"ul"},"jobs;bg;fg",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jobs")," \ud83d\udc49 lists jobs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bg")," \ud83d\udc49 runs the specified job in the background."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fg")," \ud83d\udc49  resumes the specified job in the foreground."),(0,r.kt)("li",{parentName:"ul"},"Jobs are specified as %number."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cd"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"sets the current directory to ",(0,r.kt)("em",{parentName:"li"},"dir"),"."),(0,r.kt)("li",{parentName:"ul"},"if dir is not specified, sets the current directory to the home directory."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pwd")," \ud83d\udc49 prints the current directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"echo")," \ud83d\udc49 prints args to standard output."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eval")," \ud83d\udc49 evaluates args as a sh expression."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exec"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"runs the specified command, and replaces the current shell with it."),(0,r.kt)("li",{parentName:"ul"},"nothing after the exec statement will be executed, unless the exec itself fails."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exit")," \ud83d\udc49 Exit the current shell with exit code ",(0,r.kt)("em",{parentName:"li"},"n"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kill")," ","[-sig]"," %job",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"send signal to specified job."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kill -l")," \ud83d\udc49 list all available signals."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"read")," name",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"reads one line from standard input and assigns it to the variable name."),(0,r.kt)("li",{parentName:"ul"},"if several variables are specified, each input line will assigns to opposite variable."))),(0,r.kt)("li",{parentName:"ul"},"set ","[+/-flag][arg]",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set")," \ud83d\udc49 prints the values of all variables."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set")," args... \ud83d\udc49 sets the command-line arguments to args."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set")," +/- flag"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test")," \ud83d\udc49 evaluates a boolean expression and exits with an exit code of zero if it is true, or non-zero if it is false."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"trap")," ","[command sig]"," \ud83d\udc49 If signal sig is sent to the shell, execute command."),(0,r.kt)("li",{parentName:"ul"},"ulimit"),(0,r.kt)("li",{parentName:"ul"},"umask"),(0,r.kt)("li",{parentName:"ul"},"wait")))}d.isMDXComponent=!0}}]);